{"version":3,"sources":["components/ColorPane.js","components/SetColorModule.js","components/Results.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["ColorPane","red","green","blue","toString","color","this","computeColorCode","props","className","style","backgroundColor","height","Component","SetColorModule","handleNumberChange","e","target","name","value","Number","onNumberChange","width","class","type","min","max","disabled","onChange","Results","randomRed","randomColor","randomGreen","randomBlue","userRed","userColor","userGreen","userBlue","redDiff","Math","abs","greenDiff","blueDiff","result","resultText","onClick","onButtonClick","hidden","textAlign","Game","state","getRandomColor","playMode","bind","showResults","floor","random","setState","maxWidth","startNewGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bbd512b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ColorPane extends Component {\r\n  computeColorCode(red, green, blue) {\r\n    let redCode = (red < 16 ? \"0\" : \"\") + red.toString(16);\r\n    let greenCode = (green < 16 ? \"0\" : \"\") + green.toString(16);\r\n    let blueCode = (blue < 16 ? \"0\" : \"\") + blue.toString(16);\r\n    return \"#\" + redCode + greenCode + blueCode;\r\n  }\r\n\r\n  render() {\r\n    const color = this.computeColorCode(\r\n      this.props.color.red,\r\n      this.props.color.green,\r\n      this.props.color.blue\r\n    );\r\n    return (\r\n      <div\r\n        className=\"rounded mb-3\"\r\n        style={{ backgroundColor: color, height: \"200px\" }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPane;\r\n","import React, { Component } from \"react\";\r\nimport ColorPane from \"./ColorPane\";\r\n\r\nclass SetColorModule extends Component {\r\n  handleNumberChange = (e) => {\r\n    let color = e.target.name;\r\n    let value = Number(e.target.value);\r\n    if (value < 0) value = 0;\r\n    if (value > 255) value = 255;\r\n    this.props.onNumberChange(color, value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ColorPane color={this.props.color} />\r\n        <form style={{ width: \"150px\" }}>\r\n          <div className=\"input-group mb-3\">\r\n            <div class=\"input-group-prepend\">\r\n              <span class=\"input-group-text\">Red:</span>\r\n            </div>{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              name=\"red\"\r\n              value={this.props.color.red}\r\n              min={0}\r\n              max={255}\r\n              disabled={this.props.disabled}\r\n              onChange={this.handleNumberChange}\r\n            />\r\n          </div>\r\n          <div className=\"input-group mb-3\">\r\n            <div class=\"input-group-prepend\">\r\n              <span class=\"input-group-text\">Green:</span>\r\n            </div>{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              name=\"green\"\r\n              value={this.props.color.green}\r\n              min={0}\r\n              max={255}\r\n              disabled={this.props.disabled}\r\n              onChange={this.handleNumberChange}\r\n            />\r\n          </div>\r\n          <div className=\"input-group mb-3\">\r\n            <div class=\"input-group-prepend\">\r\n              <span class=\"input-group-text\">Blue:</span>\r\n            </div>{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              name=\"blue\"\r\n              value={this.props.color.blue}\r\n              min={0}\r\n              max={255}\r\n              disabled={this.props.disabled}\r\n              onChange={this.handleNumberChange}\r\n            />\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetColorModule;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Results extends Component {\r\n  render() {\r\n    let randomRed = this.props.randomColor.red;\r\n    let randomGreen = this.props.randomColor.green;\r\n    let randomBlue = this.props.randomColor.blue;\r\n    let userRed = this.props.userColor.red;\r\n    let userGreen = this.props.userColor.green;\r\n    let userBlue = this.props.userColor.blue;\r\n    let redDiff = Math.abs(randomRed - userRed);\r\n    let greenDiff = Math.abs(randomGreen - userGreen);\r\n    let blueDiff = Math.abs(randomBlue - userBlue);\r\n    let result = redDiff + greenDiff + blueDiff;\r\n\r\n    let resultText = \"\";\r\n\r\n    if (result === 0) {\r\n      resultText = \"Unbelievable! You've hit it absolutely spot on!\";\r\n    } else if (result > 0 && result <= 10) {\r\n      resultText = \"Amazing! You were very, very close this time!\";\r\n    } else if (result > 10 && result <= 40) {\r\n      resultText = \"Good job! That was pretty close!\";\r\n    } else if (result > 40 && result <= 100) {\r\n      resultText =\r\n        \"Well, that's not exatly it, but you've got the right idea...\";\r\n    } else {\r\n      resultText = \"Oops! That's not even close!\";\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-block\"\r\n          onClick={this.props.onButtonClick}\r\n          hidden={!this.props.hidden}\r\n        >\r\n          Display Results\r\n        </button>\r\n        <br />\r\n        <div hidden={this.props.hidden}>\r\n          <h4 style={{ textAlign: \"center\" }}>{resultText}</h4>\r\n          <br />\r\n          <table className=\"table table-sm\">\r\n            <thead className=\"thead-light\">\r\n              <tr>\r\n                <th></th>\r\n                <th>Our color</th>\r\n                <th>Your color</th>\r\n                <th>Difference</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <strong>Red</strong>\r\n                </td>\r\n                <td>{randomRed}</td>\r\n                <td>{userRed}</td>\r\n                <td>{redDiff}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Green</strong>\r\n                </td>\r\n                <td>{randomGreen}</td>\r\n                <td>{userGreen}</td>\r\n                <td>{greenDiff}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <strong>Blue</strong>\r\n                </td>\r\n                <td>{randomBlue}</td>\r\n                <td>{userBlue}</td>\r\n                <td>{blueDiff}</td>\r\n              </tr>\r\n            </tbody>\r\n            <tfoot>\r\n              <tr>\r\n                <td />\r\n                <td />\r\n                <td>\r\n                  <strong>Total:</strong>\r\n                </td>\r\n                <td>\r\n                  <strong>{redDiff + greenDiff + blueDiff}</strong>\r\n                </td>\r\n              </tr>\r\n            </tfoot>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\nimport ColorPane from \"./ColorPane\";\r\nimport SetColorModule from \"./SetColorModule\";\r\nimport Results from \"./Results\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      randomColor: this.getRandomColor(),\r\n      userColor: {\r\n        red: 0,\r\n        green: 0,\r\n        blue: 0\r\n      },\r\n      playMode: true\r\n    };\r\n\r\n    this.onNumberChange = this.onNumberChange.bind(this);\r\n    this.showResults = this.showResults.bind(this);\r\n  }\r\n\r\n  getRandomColor() {\r\n    return {\r\n      red: Math.floor(Math.random() * 256),\r\n      green: Math.floor(Math.random() * 256),\r\n      blue: Math.floor(Math.random() * 256)\r\n    };\r\n  }\r\n\r\n  startNewGame() {\r\n    this.setState({\r\n      randomColor: this.getRandomColor(),\r\n      userColor: {\r\n        red: 0,\r\n        green: 0,\r\n        blue: 0\r\n      },\r\n      playMode: true\r\n    });\r\n  }\r\n\r\n  onNumberChange(color, value) {\r\n    let userColor = this.state.userColor;\r\n    userColor[color] = value;\r\n    this.setState({ userColor: userColor });\r\n  }\r\n\r\n  showResults() {\r\n    this.setState({ playMode: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container p-3 my-3 border\" style={{ maxWidth: \"600px\" }}>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-6\">\r\n            <h4 className=\"text-center\">Here's a random color</h4>\r\n            <ColorPane color={this.state.randomColor} />\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <h4 className=\"text-center\">Can you match it?</h4>\r\n            <SetColorModule\r\n              color={this.state.userColor}\r\n              disabled={!this.state.playMode}\r\n              onNumberChange={this.onNumberChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          {\" \"}\r\n          <div className=\"col-sm-2\" />\r\n          <div className=\"col-sm-8\">\r\n            <Results\r\n              randomColor={this.state.randomColor}\r\n              userColor={this.state.userColor}\r\n              hidden={this.state.playMode}\r\n              onButtonClick={this.showResults}\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2\" />\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm text-center\">\r\n            <button\r\n              className=\"btn btn-primary btn-lg btn-block\"\r\n              type=\"button\"\r\n              onClick={this.startNewGame.bind(this)}\r\n            >\r\n              New Game\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}